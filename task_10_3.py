# 3. Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Формат вывода результата:
#
# Создать не менее пяти-семи экземпляров.
# Выполнить все арифмитические операторы.
# Результаты показать с помощью make_order
# Техническое задание:
#
# Создать класс «Клетка». В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# Перегрузить арифметические операторы: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__floordiv__). Вспомнить/посмотреть какие аргументы у операторов и что они возвращают.
# Эти методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и деление клеток, соответственно.
# Сложение. Число ячеек общей клетки равняться сумме ячеек исходных двух клеток.
# Вычитание. Число ячеек общей клетки равняться разности кол-ва ячеек исходных двух клеток. Операцию необходимо выполнять, только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение. Если здесь использовать исключение - посмотрите какой тип исключения подойдет лучше всего.
# Умножение. Число ячеек общей клетки равняться произведению кол-ва ячеек исходных двух клеток.
# Деление. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# Реализовать метод make_order(), принимающий количество ячеек в ряду. Этот метод позволяет организовать ячейки по рядам. Метод должен возвращать строку вида *****\n*****\n*****...;, где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся. Возвращаемое значение предназначено для последующей передачи в функцию print.
# Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5. В этом случае метод make_order() вернёт строку: *****\n*****\n**.
# Или, количество ячеек клетки — 15, а количество ячеек в ряду равняется 5. Тогда метод make_order() вернёт строку: *****\n*****\n*****.

class OrganicCell:
    def __init__(self, size: int):
        if size <= 0:
            raise Exception('Клетка не может быть меньше одной ячейки')
        self.size = size
    def __add__(self, other):
        return f'Размер клетки увеличен и равен: {self.size + other.size}'
    def __sub__(self, other):
        sub = self.size - other.size
        if sub > 0:
            return f'Размер клетки стал меньше и равен: {sub} '
        else:
            raise Exception(f'Ошибка! Клетка исчезла')
    def __truediv__(self, other):
        return self.size // other.size
    def __mul__(self, other):
        return self.size * other.size
    def make_order(self, row):
        result = ''
        for i in range(int(self.size / row)):
            result += '*' * row + '\n'
        result += '*' * (self.size % row) + '\n'
        return result
cell = OrganicCell(12)
cell_2 = OrganicCell(6)
print(cell + cell_2)
print(cell - cell_2)
print(cell / cell_2)
print(cell * cell_2)
print(cell.make_order(7))
print(cell.make_order(11))