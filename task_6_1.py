# 1. Распарсить (получить определённые данные) файл логов web-сервера nginx_logs.txt
# Формат вывода результата:
#
# [
#     ...
#     ('141.138.90.60', 'GET', '/downloads/product_2'),
#     ('141.138.90.60', 'HEAD', '/downloads/product_2'),
#     ('173.255.199.22', 'GET', '/downloads/product_1'),
#     ...
# ]
#
# Техническое задание
#
# Не использовать библиотеки для парсинга. Только работа со строками.
# Создать список кортежей вида: `(<remote_addr>, <request_type>, <requested_resource>)`. Именно список кортежей.
# Код должен работать даже с файлами, размер которых превышает объем ОЗУ компьютера.
# Вывести список на экран.
# Примечание:
#
# Файл логов можно загрузить отсюда: https://raw.githubusercontent.com/elastic/examples/master/Common%20Data%20Formats/nginx_logs/nginx_logs
# В подобных структурированных файлах разделитель полей всегда очевиден.

from os.path import join
mpath = join('.','data_1','nginx_logs.txt')
myfile = open(file=mpath,mode='r',encoding='utf-8')
list_tpl=[]
for line in myfile:
    # не знаю на сколько это затратнее, но через метод разделения строки по
    # пробелам на 7 списков выглядит короче и более понятнее:
    line1 = line.split(' ',7)
    tpl = line1[0], line1[5][1:], line1[6]
    list_tpl.append(tpl)
# print(list_tpl)
# Снова этот сложно-форматированный вывод результата, изображенный в задании
# (список кортежей разбитый по разным строкам и обрамленный вначале и в конце вкадратными скобками).
# Получается вывести результат только как-то так:
print('[')
print(*list_tpl,sep=',\n')
print(']')
# print(',\n'.join(map(str,list_tpl)))
myfile.close()
