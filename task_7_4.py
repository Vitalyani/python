# 4. Написать скрипт, который для заданной папки выводит статистику размеров файлов
# Формат вывода результата:
#
# {
#   100: 15,
#   1000: 3,
#   10000: 7,
#   100000: 2
# }
#
# Тут 15 файлов размером не более 100 байт; 3 файла больше 100 и не больше 1000 байт&#x2026;
#
# Техническое задание
#
# Директорию с файлами some_data можно скачать из прикрепленных к уроку файлов.
# Результат возвращается в виде словаря
# ключи — верхняя граница размера файла (пусть будет кратна 10)
# значения — общее количество файлов (в том числе и в подпапках), размер которых не превышает этой границы, но больше предыдущей (начинаем с 0)
# Программа должна легко модифицироваться под другие границы диапазонов или увеличение их количества.
# Примечание:
# размер файла можно получить из атрибута .st_size объекта os.stat.

import os

from os.path import join, getsize
root_dir = join('.', 'some_data')

sizes = [10, 100, 1000, 10000, 100000, 1000000]
rez_dict = dict.fromkeys(sizes, 0) # "пустой" словарь с ключами - каждым значением из sizes
for root, dirs, files in os.walk(root_dir):
    for file in files: # Для каждого файла
        size_file = getsize(join(root, file)) # Считываем размер файла в байтах.
        # Сравниваем размер файла со списком размеров sizes и в to_sizes "записываем"
        # минимальное значение из размеров sizes, меньше которого размер файла:
        to_sizes = min(filter(lambda x: size_file < x, sizes))
        # относим этот файл к соответствующему ключу rez_dict (+1 к значению):
        rez_dict[to_sizes] += 1
print(rez_dict)
