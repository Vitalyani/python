# 1. Создать класс TrafficLight (светофор).
# Техническое задание:
#
# Хорошо подумайте какие из атрибутов являются атрибутами экземпляра, а какие класса.
# определить у него один атрибут color (цвет) - приватный. Это текущий цвет светофора.
# Определить метод state (состояние), возвращающий текущий цвет в виде строки.
# определить метод running (запуск)
# в рамках метода реализовать переключение светофора в режимы: красный, жёлтый, зелёный
# продолжительность первого состояния (красный) составляет 7 секунд, второго (жёлтый) — 2 секунды, третьего (зелёный) — на ваше усмотрение
# переключение между режимами должно осуществляться как у реального светофора: красный, жёлтый, зелёный, жёлтый, красный и т.д.
# метод меняет текущий цвет светофора и печатает его с помощью state.
# Предусмотреть разумное ограничение на количество итераций.
# Проверить работу примера, создав экземпляр и вызвав метод running.
# Примечание:
#
# Для реализации задержек времени можно воспользоваться функцией sleep пакета time
# Циклическое переключение просто реализовать с помощью cycle пакета itertools
# Усложнение:
#
# Тайминги передаются при создании экземпляра светофора в виде трех чисел.
# Внутри конструктора их надо соединить в единую структуру с цветами, так, чтобы было максимально понятно и лаконично.
# Ограничение на количество итераций в методе running убрать. Прерывание работы светофора реализовать через нажатие Crtl-C (или stop в IDE) в процессе выполнения. Найти какое исключение при этом возникает. Обработать его и завершить программу с выводом диагностического сообщения.

from itertools import cycle
from time import sleep

class TrafficLight:
    __color = cycle([
        {'signal': 'красный', 'duration': 7},
        {'signal': 'желтый', 'duration': 2},
        {'signal': 'зеленый', 'duration': 5},
        {'signal': 'желтый', 'duration': 2}
    ])
    def state(self, signal, duration):
        self.signal = signal
        self.duration = duration
        print(f'Сигнал {signal}, ожидание {duration} сек')

    def running(self):
        light = next(self.__color)
        self.state(light["signal"], light["duration"])
        sleep(light['duration'])


traffic_light = TrafficLight()
traffic_light.running()
traffic_light.running()
traffic_light.running()
traffic_light.running()
traffic_light.running()
traffic_light.running()
traffic_light.running()
